
import java.io.*;
import java.util.*;

public class Trie {

    // node class
    private static class TrieNode {

        boolean isWord;
        HashMap<Character, TrieNode> children = new HashMap<
            Character,
            TrieNode
        >();
    }

    // root node
    private TrieNode root = new TrieNode();

    //takes a target string and distance, creates a hashmap of all words within that distance 
    //of the target string
    private void recursiveCheck(int k, String target, TrieNode trie, HashMap<String, Integer> wordMap, String newWord, int idx, int dist){
        Trie.TrieNode current = trie;
        //end of that branch, return
        if (current == null){
            return;
        }
      
        if (target.length() - idx <= k && current != null && current.isWord){
            if ((!(wordMap.containsKey(newWord)) || wordMap.get(newWord) > dist - k + target.length() - idx)){
                wordMap.put(newWord, dist-k + target.length() - idx);
            }
            
        }
       
       
        if (k>0){
            //Deletion:
            if (idx < target.length()){
                recursiveCheck(k-1, target, current, wordMap, newWord, idx + 1, dist);
            }
            
            
            //Insertion:
                for (int i = 0; i < alphabet.length(); i++) {
                    char c = alphabet.charAt(i);
                    TrieNode child = current.children.get(c);
                    recursiveCheck(k-1, target, child, wordMap, newWord+c, idx, dist);
                }
    
            
            //Substitution:
            if (idx < target.length()){
            for (int i = 0; i < alphabet.length(); i++){
                char c = alphabet.charAt(i);
                if (current != null){
                    TrieNode child = current.children.get(c);
                    if (child != null && idx < target.length()){
                        if (alphabet.charAt(i) == target.charAt(idx)){
                            recursiveCheck(k, target, child, wordMap, newWord+c, idx+1, dist);
                            }
                        else{
                            recursiveCheck(k-1,target, child, wordMap, newWord+c, idx+1, dist);
                            }
                    }
                }
                
                }
        }
            }
            if (idx < target.length()){
                if (k == 0){
                for (int i = 0; i < alphabet.length(); i++){
                    char c = alphabet.charAt(i);
                    if (alphabet.charAt(i) == target.charAt(idx)){
                        if (current != null){
                            TrieNode child = current.children.get(c);
                            if (child != null && idx < target.length()){
                                recursiveCheck(k, target, current.children.get(c), wordMap, newWord+c, idx+1, dist);
                            }
                        }
                    }
            }
    }}
            
}

    public HashMap<String, Integer> suggestions(String target, int dist) {
        HashMap<String, Integer> words = new HashMap<String, Integer>();
        recursiveCheck(dist, target, root, words, "", 0, dist);
        return words;
    }

    // method to add a string
    public boolean add(String s) {
        s = s.trim().toLowerCase();

        TrieNode current = root;

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isLowerCase(c)) {
                TrieNode child = current.children.get(c);
                if (child == null) {
                    child = new TrieNode();
                    current.children.put(c, child);
                }
                current = child;
            }
        }

        if (current.isWord) return false;

        current.isWord = true;
        return true;
    }

    // method to check if a string has been added
    public boolean contains(String s) {
        s = s.trim().toLowerCase();

        TrieNode current = root;

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isLowerCase(c)) {
                TrieNode child = current.children.get(c);
                if (child == null) {
                    return false;
                }
                current = child;
            }
        }

        return current.isWord;
    }

    // empty constructor
    public Trie() {
        super();
    }

    // constructor to add words from a stream, like standard input
    public Trie(InputStream source) {
        Scanner scan = new Scanner(source);
        addWords(scan);
        scan.close();
    }

    // constructor to add words from a file
    public Trie(String filename) throws FileNotFoundException {
        Scanner scan = new Scanner(new File(filename));
        addWords(scan);
        scan.close();
    }

    // helper function to add words from a scanner
    private void addWords(Scanner scan) {
        while (scan.hasNext()) {
            add(scan.next());
        }
    }

    // main function for testing
    public static void main(String[] args) throws FileNotFoundException{

    }
}
